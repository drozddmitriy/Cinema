#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kino2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Kino")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Inserttiket(tiket instance);
    partial void Updatetiket(tiket instance);
    partial void Deletetiket(tiket instance);
    partial void Insertsector(sector instance);
    partial void Updatesector(sector instance);
    partial void Deletesector(sector instance);
    partial void Insertseans(seans instance);
    partial void Updateseans(seans instance);
    partial void Deleteseans(seans instance);
    partial void Insertroom(room instance);
    partial void Updateroom(room instance);
    partial void Deleteroom(room instance);
    partial void Insertfilm(film instance);
    partial void Updatefilm(film instance);
    partial void Deletefilm(film instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::kino2.Properties.Settings.Default.KinoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tiket> tiket
		{
			get
			{
				return this.GetTable<tiket>();
			}
		}
		
		public System.Data.Linq.Table<sector> sector
		{
			get
			{
				return this.GetTable<sector>();
			}
		}
		
		public System.Data.Linq.Table<seans> seans
		{
			get
			{
				return this.GetTable<seans>();
			}
		}
		
		public System.Data.Linq.Table<room> room
		{
			get
			{
				return this.GetTable<room>();
			}
		}
		
		public System.Data.Linq.Table<film> film
		{
			get
			{
				return this.GetTable<film>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tiket")]
	public partial class tiket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _id_seans;
		
		private int _gorizontal;
		
		private int _vertical;
		
		private EntityRef<seans> _seans;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_seansChanging(System.Nullable<int> value);
    partial void Onid_seansChanged();
    partial void OngorizontalChanging(int value);
    partial void OngorizontalChanged();
    partial void OnverticalChanging(int value);
    partial void OnverticalChanged();
    #endregion
		
		public tiket()
		{
			this._seans = default(EntityRef<seans>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_seans", DbType="Int")]
		public System.Nullable<int> id_seans
		{
			get
			{
				return this._id_seans;
			}
			set
			{
				if ((this._id_seans != value))
				{
					if (this._seans.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_seansChanging(value);
					this.SendPropertyChanging();
					this._id_seans = value;
					this.SendPropertyChanged("id_seans");
					this.Onid_seansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gorizontal", DbType="Int NOT NULL")]
		public int gorizontal
		{
			get
			{
				return this._gorizontal;
			}
			set
			{
				if ((this._gorizontal != value))
				{
					this.OngorizontalChanging(value);
					this.SendPropertyChanging();
					this._gorizontal = value;
					this.SendPropertyChanged("gorizontal");
					this.OngorizontalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vertical", DbType="Int NOT NULL")]
		public int vertical
		{
			get
			{
				return this._vertical;
			}
			set
			{
				if ((this._vertical != value))
				{
					this.OnverticalChanging(value);
					this.SendPropertyChanging();
					this._vertical = value;
					this.SendPropertyChanged("vertical");
					this.OnverticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seans_tiket", Storage="_seans", ThisKey="id_seans", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public seans seans
		{
			get
			{
				return this._seans.Entity;
			}
			set
			{
				seans previousValue = this._seans.Entity;
				if (((previousValue != value) 
							|| (this._seans.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._seans.Entity = null;
						previousValue.tiket.Remove(this);
					}
					this._seans.Entity = value;
					if ((value != null))
					{
						value.tiket.Add(this);
						this._id_seans = value.id;
					}
					else
					{
						this._id_seans = default(Nullable<int>);
					}
					this.SendPropertyChanged("seans");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sector")]
	public partial class sector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _vertical;
		
		private int _gorizontal;
		
		private EntitySet<room> _room;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnverticalChanging(int value);
    partial void OnverticalChanged();
    partial void OngorizontalChanging(int value);
    partial void OngorizontalChanged();
    #endregion
		
		public sector()
		{
			this._room = new EntitySet<room>(new Action<room>(this.attach_room), new Action<room>(this.detach_room));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vertical", DbType="Int NOT NULL")]
		public int vertical
		{
			get
			{
				return this._vertical;
			}
			set
			{
				if ((this._vertical != value))
				{
					this.OnverticalChanging(value);
					this.SendPropertyChanging();
					this._vertical = value;
					this.SendPropertyChanged("vertical");
					this.OnverticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gorizontal", DbType="Int NOT NULL")]
		public int gorizontal
		{
			get
			{
				return this._gorizontal;
			}
			set
			{
				if ((this._gorizontal != value))
				{
					this.OngorizontalChanging(value);
					this.SendPropertyChanging();
					this._gorizontal = value;
					this.SendPropertyChanged("gorizontal");
					this.OngorizontalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sector_room", Storage="_room", ThisKey="id", OtherKey="id_section")]
		public EntitySet<room> room
		{
			get
			{
				return this._room;
			}
			set
			{
				this._room.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_room(room entity)
		{
			this.SendPropertyChanging();
			entity.sector = this;
		}
		
		private void detach_room(room entity)
		{
			this.SendPropertyChanging();
			entity.sector = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.seans")]
	public partial class seans : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _time_;
		
		private System.Nullable<int> _id_film;
		
		private System.Nullable<int> _id_room;
		
		private int _cena;
		
		private EntitySet<tiket> _tiket;
		
		private EntityRef<room> _room;
		
		private EntityRef<film> _film;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontime_Changing(string value);
    partial void Ontime_Changed();
    partial void Onid_filmChanging(System.Nullable<int> value);
    partial void Onid_filmChanged();
    partial void Onid_roomChanging(System.Nullable<int> value);
    partial void Onid_roomChanged();
    partial void OncenaChanging(int value);
    partial void OncenaChanged();
    #endregion
		
		public seans()
		{
			this._tiket = new EntitySet<tiket>(new Action<tiket>(this.attach_tiket), new Action<tiket>(this.detach_tiket));
			this._room = default(EntityRef<room>);
			this._film = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string time_
		{
			get
			{
				return this._time_;
			}
			set
			{
				if ((this._time_ != value))
				{
					this.Ontime_Changing(value);
					this.SendPropertyChanging();
					this._time_ = value;
					this.SendPropertyChanged("time_");
					this.Ontime_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int")]
		public System.Nullable<int> id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_room", DbType="Int")]
		public System.Nullable<int> id_room
		{
			get
			{
				return this._id_room;
			}
			set
			{
				if ((this._id_room != value))
				{
					if (this._room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_roomChanging(value);
					this.SendPropertyChanging();
					this._id_room = value;
					this.SendPropertyChanged("id_room");
					this.Onid_roomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cena", DbType="Int NOT NULL")]
		public int cena
		{
			get
			{
				return this._cena;
			}
			set
			{
				if ((this._cena != value))
				{
					this.OncenaChanging(value);
					this.SendPropertyChanging();
					this._cena = value;
					this.SendPropertyChanged("cena");
					this.OncenaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seans_tiket", Storage="_tiket", ThisKey="id", OtherKey="id_seans")]
		public EntitySet<tiket> tiket
		{
			get
			{
				return this._tiket;
			}
			set
			{
				this._tiket.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_seans", Storage="_room", ThisKey="id_room", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public room room
		{
			get
			{
				return this._room.Entity;
			}
			set
			{
				room previousValue = this._room.Entity;
				if (((previousValue != value) 
							|| (this._room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._room.Entity = null;
						previousValue.seans.Remove(this);
					}
					this._room.Entity = value;
					if ((value != null))
					{
						value.seans.Add(this);
						this._id_room = value.id;
					}
					else
					{
						this._id_room = default(Nullable<int>);
					}
					this.SendPropertyChanged("room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_seans", Storage="_film", ThisKey="id_film", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.seans.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.seans.Add(this);
						this._id_film = value.id;
					}
					else
					{
						this._id_film = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tiket(tiket entity)
		{
			this.SendPropertyChanging();
			entity.seans = this;
		}
		
		private void detach_tiket(tiket entity)
		{
			this.SendPropertyChanging();
			entity.seans = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.room")]
	public partial class room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _id_section;
		
		private EntitySet<seans> _seans;
		
		private EntityRef<sector> _sector;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onid_sectionChanging(System.Nullable<int> value);
    partial void Onid_sectionChanged();
    #endregion
		
		public room()
		{
			this._seans = new EntitySet<seans>(new Action<seans>(this.attach_seans), new Action<seans>(this.detach_seans));
			this._sector = default(EntityRef<sector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_section", DbType="Int")]
		public System.Nullable<int> id_section
		{
			get
			{
				return this._id_section;
			}
			set
			{
				if ((this._id_section != value))
				{
					if (this._sector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_sectionChanging(value);
					this.SendPropertyChanging();
					this._id_section = value;
					this.SendPropertyChanged("id_section");
					this.Onid_sectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="room_seans", Storage="_seans", ThisKey="id", OtherKey="id_room")]
		public EntitySet<seans> seans
		{
			get
			{
				return this._seans;
			}
			set
			{
				this._seans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sector_room", Storage="_sector", ThisKey="id_section", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public sector sector
		{
			get
			{
				return this._sector.Entity;
			}
			set
			{
				sector previousValue = this._sector.Entity;
				if (((previousValue != value) 
							|| (this._sector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sector.Entity = null;
						previousValue.room.Remove(this);
					}
					this._sector.Entity = value;
					if ((value != null))
					{
						value.room.Add(this);
						this._id_section = value.id;
					}
					else
					{
						this._id_section = default(Nullable<int>);
					}
					this.SendPropertyChanged("sector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_seans(seans entity)
		{
			this.SendPropertyChanging();
			entity.room = this;
		}
		
		private void detach_seans(seans entity)
		{
			this.SendPropertyChanging();
			entity.room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film")]
	public partial class film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Data.Linq.Binary _img;
		
		private EntitySet<seans> _seans;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimgChanging(System.Data.Linq.Binary value);
    partial void OnimgChanged();
    #endregion
		
		public film()
		{
			this._seans = new EntitySet<seans>(new Action<seans>(this.attach_seans), new Action<seans>(this.detach_seans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary img
		{
			get
			{
				return this._img;
			}
			set
			{
				if ((this._img != value))
				{
					this.OnimgChanging(value);
					this.SendPropertyChanging();
					this._img = value;
					this.SendPropertyChanged("img");
					this.OnimgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_seans", Storage="_seans", ThisKey="id", OtherKey="id_film")]
		public EntitySet<seans> seans
		{
			get
			{
				return this._seans;
			}
			set
			{
				this._seans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_seans(seans entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_seans(seans entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
	}
}
#pragma warning restore 1591
